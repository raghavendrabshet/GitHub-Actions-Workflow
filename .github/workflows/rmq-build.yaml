name: RabbitMQ Build and Deploy

on:
  pull_request:
    branches:
      - develop
      - uat
      - main
  push:
    branches:
      - develop
      - uat
      - main
  workflow_dispatch:
   inputs:
     push:
       description: 'Boolean input to push Docker image to Harbor'
       required: true
       type: boolean
       default: false
jobs:
  build:
     runs-on: ubuntu-latest
     
     steps:
     # Step 1: Checkout the code from the repository
       - name: Checkout code
         uses: actions/checkout@v3
     # Step 2: Set up Docker Buildx (for building multi-platform images)
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v2
     # Step 3: Set up .NET Core SDK (for RabbitMQ app in .NET)
       - name: Set up .NET Core
         uses: actions/setup-dotnet@v3
         with:
            dotnet-version: '8.x'
     # Step 4: Restore .NET dependencies
       - name: Restore dependencies
         run: |
              cd RMQApi
              dotnet restore RMQApi.csproj
     # Step 5: Clean the project
       - name: Clean the project
         run: |
              cd RMQApi
              dotnet clean
     # Step 6: Build the RabbitMQ application
       - name: Build the RabbitMQ application
         run: |
              cd RMQApi/RMQApi.Tests   
              dotnet build
     # Step 7: Run unit tests and collect code coverage
       - name: Run unit tests
         run: |
              cd RMQApi/RMQApi.Tests
              dotnet test --configuration Release --collect:"XPlat Code Coverage" --results-directory ./testResults /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./testResults/   
         continue-on-error: false
     # Temporary step to list files in testResults
       - name: List test results directory
         run: ls -R testResults
     # Debug step to print the contents of Summary.txt
       - name: Print test coverage summary
         run: cat testResults/coverage/Summary.txt    
     # Step 8: Verify test coverage (requires minimum of 85%)
       - name: Check test coverage
         run: |
              dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.*
              reportgenerator -reports:RMQApi/RMQApi.Tests/testResults/coverage.cobertura.xml -targetdir:testResults/coverage -reporttypes:TextSummary
              coverage=$(cat testResults/coverage/Summary.txt | grep -Po '(?<=Line coverage: )\d+(\.\d+)?')
              echo "Test Coverage: $coverage%"
              if [[ -z "$coverage" ]]; then
                echo "No coverage data found - failing the build."
                exit 1
              fi
              if (( $(echo "$coverage < 85.0" | bc -l) )); then
                echo "Test coverage is below 85% - failing the build."
                exit 1
              fi
         shell: bash            
     # Step 9: Build Docker image using the Dockerfile in the root of the repository
       - name: Build Docker image
         run: |
              docker build -t rmq-app:${{ github.sha }} .
     # Step 10: Push Docker image to Harbor if conditions are met
       - name: Push Docker image to Harbor
         if: ${{ github.event_name == 'push' || github.event.inputs.push == 'true' }}
         run: |
              echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ secrets.HARBOR_URL }} -u "${{ secrets.HARBOR_USERNAME }}" --password-stdin
              docker tag rmq-app:${{ github.sha }} ${{ secrets.HARBOR_URL }}/project/rmq-app:${{ github.ref_name }}
              docker push ${{ secrets.HARBOR_URL }}/project/rmq-app:${{ github.ref_name }}







 
  
   
    
     
      
       
        




 
  
   
    
     



name: RMQ Build and Deploy

on:
  pull_request:
    branches:
      - develop
      - uat
      - main 
  push:
    branches:
      - develop
      - uat
      - main
  workflow_dispatch:
    inputs:
      push:
        description: 'Boolean input to determine whether to push the Docker image to Harbor'
        required: true
        type: boolean
jobs:
  build:
    runs-on: ubuntu-latest
      steps:
      # Step 1: Set up Docker Buildx (for building multi-platform images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Step 2: Set up .NET Core SDK (for RabbitMQ app in .NET)
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
           dotnet-version: '8.x'
      # Step 3: Restore .NET dependencies
      - name: Restore dependencies
        run: dotnet restore
      # Step 4: Build the RabbitMQ application
      - name: Build the RabbitMQ application
        run: dotnet build --configuration Release --no-restore
      # Step 5: Run unit tests and collect code coverage
      - name: Run unit tests
        run: dotnet test --configuration Release --collect:"XPlat Code Coverage" --results-directory ./testResults --no-build
        continue-on-error: false
      # Step 6: Verify test coverage (requires minimum of 85%)
      - name: Check test coverage
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.*
          reportgenerator -reports:testResults/**/coverage.cobertura.xml -targetdir:testResults/coverage -reporttypes:TextSummary
          coverage=$(cat testResults/coverage/Summary.txt | grep -Po '(?<=Line coverage: )\d+(\.\d+)?')
          echo "Test Coverage: $coverage%"
          if (( $(echo "$coverage < 85.0" | bc -l) )); then
            echo "Test coverage is below 85% - failing the build."
            exit 1
          fi
        shell: bash
       # Step 7: Build Docker image using the Dockerfile in the root of the repository
       - name: Build Docker image
         run: |
           docker build -t rmq-app:${{ github.sha }} .
